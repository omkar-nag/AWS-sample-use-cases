AWSTemplateFormatVersion: 2010-09-09
#Parameters:
#   "roleName": {
#      Type: String
#  }
Resources:
  IAMCreationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: 'ARN_OF_IAM_ROLE_GRANTING_ACCESS_TO_IAM'
      Code:
        ZipFile: !Sub |
          var AWS = require('aws-sdk');
          var iam = new AWS.IAM();
          var response = require('cfn-response');
          var responseData = {};
           var params = {
              AssumeRolePolicyDocument: JSON.stringify({

              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "s3.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]

              }),
              Path: "/", 
              RoleName: "Test-Role2"
            };
          exports.handler = function(event, context) {
              if (event.RequestType != 'Create') {
                responseData = { 'status': 'Err - RequestType is not Create' };

                response.send(event, context, response.FAILED, responseData);

              }
              iam.createRole(params, function(err, data) {
                  if (err) {
                      console.log(err, err.stack); // an error occurred
                      responseData = { 'status': 'Error while creating iamrole' };

                      response.send(event, context, response.FAILED, responseData); 
                  }
                  
                  else {
                    console.log(data);           // successful response
                    var res = 'Success:' + "  Role ARN:" + " " + data["Role"]["Arn"]; 
                    responseData = { 'status': res};
                    response.send(event, context, response.SUCCESS, responseData); 
                  }
                        
              }); 
            
          }
      Runtime: nodejs12.x
  IAMFunction:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt IAMCreationFunction.Arn
    DependsOn: IAMCreationFunction
Outputs:
  Results:
    Value: !GetAtt IAMFunction.status
